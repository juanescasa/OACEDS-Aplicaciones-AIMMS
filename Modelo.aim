
MAIN MODEL MCDP
  comment :  "13 de Junio 2014
              Inexplicablemente pasa esto con las restricciones asociadas albalance de inventario en los clientes
              The first argument of indexed set \"NLV\" is index \"k\" with set range set \"VEH\".  However, the first set in the domain of indexed set \"NLV\" is set \"NOD\".  These two sets do not have the same root set.
              cuando se reduce el numero de indices en el dominio de la restricción se solucioa el problema."

  SECTION Conexion_con_DB


    DATABASE PROCEDURE
      identifier  :  DB_MAE_TIN
      data source :  "OACED_ESC001"
      sql query   :  "Select * from  MAE_TIN"
      property    :  UseResultSet
      mapping     :  "COD_TIN"-->TIN

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_MAE_MAR
      data source :  "OACED_ESC001"
      sql query   :  "Select * from  MAE_MAR"
      property    :  UseResultSet
      mapping     :  "COD_MAR"-->MAR

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_MAE_NOD
      data source :  "OACED_ESC001"
      sql query   :  "SELECT * FROM MAE_NOD WHERE COD_ESC='1'"
      property    :  UseResultSet
      mapping     :  "COD_NOD"-->i,
                      "COD_TIN"-->TNOD(i),
                      "COOR_LON"-->CoorX(i),
                      "COOR_LAT"-->CoorY(i)
                      !"COD_MAR"-->MARCA(i),

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_MAE_TIV
      data source :  "OACED_ESC001"
      sql query   :  "Select * from  MAE_TIV"
      property    :  UseResultSet
      mapping     :  "COD_TIV"-->TVE,
                      "CDUV"-->CDUV(v)

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_MAE_VEH
      data source :  "OACED_ESC001"
      sql query   :  "SELECT * FROM MAE_VEH WHERE COD_ESC='1'"
      property    :  UseResultSet
      mapping     :  "COD_VEH"-->k,
                      "CAPV"-->CAPV(k),
                      "COUV"-->COUV(k)

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_MAE_PER
      data source :  "OACED_ESC001"
      sql query   :  " SELECT * FROM MAE_PER WHERE COD_ESC='1' "
      property    :  UseResultSet
      mapping     :  "COD_PER"-->PERH  !revisar si no va a poner problema con el Horizonte

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_MAE_PRO
      data source :  "OACED_ESC001"
      sql query   :  "Select * from  MAE_PRO"
      property    :  UseResultSet
      mapping     :  "COD_PRO"-->m,
                      "DENS"-->DENS(m)

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_MAE_COM
      data source :  "OACED_ESC001"
      sql query   :  " SELECT COD_COM, CACC " +
                              " FROM MAE_COM WHERE COD_COM IN " +
                                      " (SELECT  COD_COM FROM COM_VEH WHERE COD_VEH IN "  +
                                              " (SELECT COD_VEH FROM MAE_VEH WHERE COD_ESC='1') AND PCOV='1') "
      property    :  UseResultSet
      mapping     :  "COD_COM"-->l,
                      "CACC"-->CACC(l)

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_NOD_NOD1
      data source :  "OACED_ESC001"
      sql query   :  "SELECT COD_NOD, COD_NOD1, TIVI, PNPP, DIST " +
                              " FROM NOD_NOD1 WHERE COD_NOD IN " +
                                      " (SELECT COD_NOD  FROM MAE_NOD WHERE COD_ESC='1') " +
                                      " AND  COD_NOD1 IN (SELECT COD_NOD  FROM MAE_NOD WHERE COD_ESC='1') "
      property    :  UseResultSet
      mapping     :  "COD_NOD"-->i,
                      "COD_NOD1"-->j,
                      "TIVI"-->TIVI(i,j),
                      "PNPP"-->PNPP(i,j),
                      "DIST"-->DIST(i,j)

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_TIV_VEH
      data source :  "OACED_ESC001"
      sql query   :  " SELECT COD_TIV, COD_VEH, PVET " +
                              " FROM TIV_VEH WHERE COD_VEH IN " +
                                      " (SELECT COD_VEH FROM MAE_VEH WHERE COD_ESC='1') "
      property    :  UseResultSet
      mapping     :  "COD_TIV"-->v,
                      "COD_VEH"-->k,
                      "PVET"-->PVET(v,k)

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_NOD_PRO
      data source :  "OACED_ESC001"
      sql query   :  " SELECT COD_NOD, COD_PRO, CALM, CAPS, INVI, PPRC " +
                              " FROM NOD_PRO WHERE COD_NOD IN " +
                                      " (SELECT COD_NOD FROM MAE_NOD WHERE COD_ESC='1') " +
                                      " AND COD_PRO IN (SELECT COD_PRO FROM MAE_PRO)"
      property    :  UseResultSet
      mapping     :  "COD_NOD"-->i,
                      "COD_PRO"-->m,
                      "CALM"-->CALM(i,m),
                      "CAPS"-->CAPS(i,m),
                      "INVI"-->INVI(i,m),
                      "PPRC"-->PPRC(i,m)
      comment    :  "Nodos <- Productos"

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_NOD_PER
      data source :  "OACED_ESC001"
      sql query   :  " SELECT COD_NOD, COD_PER, TMIN, TMAX " +
                              " FROM NOD_PER WHERE COD_NOD IN " +
                                      " (SELECT COD_NOD FROM MAE_NOD WHERE COD_ESC='1') " +
                                      " AND COD_PER IN (SELECT COD_PER FROM MAE_PER WHERE COD_ESC='1') "
      property    :  UseResultSet
      mapping     :  "COD_NOD"-->i,
                      "COD_PER"-->t,
                      "TMIN"-->TMIN(i,t),
                      "TMAX"-->TMAX(i,t)
      comment    :  "Nodos Periodos"

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_NOD_VEH
      data source :  "OACED_ESC001"
      sql query   :  "SELECT   COD_NOD, COD_VEH, PNPV, TSER, PNOI " +
                              " FROM NOD_VEH WHERE COD_NOD IN " +
                                      " (SELECT COD_NOD  FROM MAE_NOD WHERE COD_ESC='1') " +
                                      " AND COD_VEH IN (SELECT COD_VEH  FROM MAE_VEH WHERE COD_ESC='1')"
      property    :  UseResultSet
      mapping     :  "COD_NOD"-->i,
                      "COD_VEH"-->k,
                      "PNPV"-->PNPV(i,k),
                      "TSER"-->TSER(i,k),
                      "PNOI"-->PNOI(i,k)

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_COM_VEH
      data source :  "OACED_ESC001"
      sql query   :  " SELECT  COD_VEH, COD_COM, PCOV " +
                              " FROM COM_VEH WHERE COD_VEH IN " +
                                      " (SELECT COD_VEH FROM MAE_VEH WHERE COD_ESC='1') AND PCOV='1' "
      property    :  UseResultSet
      mapping     :  "COD_VEH"-->k,
                      "COD_COM"-->l,
                      "PCOV"-->PCOV(l,k)
      comment    :  "Compartimientos<-Vehiculos"

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_VEH_PER
      data source :  "OACED_ESC001"
      sql query   :  " SELECT COD_VEH, COD_PER, TFJO, TIJO " +
                              " FROM VEH_PER WHERE COD_VEH IN " +
                                      " (SELECT COD_VEH FROM MAE_VEH WHERE COD_ESC='1') "  +
                                      " AND COD_PER IN (SELECT COD_PER FROM MAE_PER WHERE COD_ESC='1')"
      property    :  UseResultSet
      mapping     :  "COD_VEH"-->k,
                      "COD_PER"-->t,
                      "TFJO"-->TFJO(k,t),
                      "TIJO"-->TIJO(k,t)
      comment    :  "Vehiculos Periodos"

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_NOD_NOD1_TIV
      data source :  "OACED_ESC001"
      sql query   :  " SELECT COD_NOD, COD_NOD1, COD_TIV, CTRA " +
                               "FROM NOD_NOD1_TIV WHERE COD_NOD IN " +
                                      " (SELECT COD_NOD  FROM MAE_NOD WHERE COD_ESC='1') " +
                                      " AND  COD_NOD1 IN (SELECT COD_NOD  FROM MAE_NOD WHERE COD_ESC='1') "
      property    :  UseResultSet
      mapping     :  "COD_NOD"-->i,
                      "COD_NOD1"-->j,
                      "COD_TIV"-->v,
                      "CTRA"-->CTRA(i,j,v)
      comment    :  "Nodos Nodos Tipo de Vehículos"

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_NOD_PRO_PER
      data source :  "OACED_ESC001"
      sql query   :  " SELECT COD_NOD, COD_PRO, COD_PER, DEMA, INVS " +
                              " FROM NOD_PRO_PER WHERE COD_NOD IN " +
                                      " (SELECT COD_NOD FROM MAE_NOD WHERE COD_ESC='1') " +
                                      " AND COD_PER IN (SELECT COD_PER FROM MAE_PER WHERE COD_ESC='1') "
      property    :  UseResultSet
      mapping     :  "COD_NOD"-->i,
                      "COD_PRO"-->m,
                      "COD_PER"-->t,
                      "DEMA"-->DEMA(i,m,t),
                      "INVS"-->INVS(i,m,t)
      comment    :  "Nodos<-Productos-Periodos"

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_PRO_COM
      data source :  "OACED_ESC001"
      sql query   :  " SELECT COD_PRO, COD_COM, CCIV FROM PRO_COM " +
                              " WHERE COD_COM IN " +
                                      " (SELECT   COD_COM " +
                                              " FROM COM_VEH WHERE COD_VEH IN " +
                                                      " (SELECT COD_VEH FROM MAE_VEH WHERE COD_ESC='1') AND PCOV='1') "
      property    :  UseResultSet
      mapping     :  "COD_PRO"-->m,
                      "COD_COM"-->l,
                      "CCIV"-->CCIV(m,l)
      comment    :  "Nodos Productos Compartimientos"

    ENDPROCEDURE  ;

    DATABASE PROCEDURE
      identifier  :  DB_ESCALARES
      data source :  "OACED_ESC001"
      sql query   :  " SELECT COD_ESC, VAL_ESC FROM ESCALARES  "
                      !" SELECT COD_ESC, VAL_ESC FROM ESCALARES WHERE COD_ESC='MBIN' "
      property    :  UseResultSet
      mapping     :  "MBIN"-->MBIN ! REVISAR
                      
                      !revisar esto, porque se modificó, la col ya no es MBIN, sino que es un dato de la Tabla

    ENDPROCEDURE  ;

  ENDSECTION Conexion_con_DB ;

  SECTION Lectura_DB


    PROCEDURE
      identifier :  LEER_TODO
      body       :  
        Read From Table DB_MAE_TIN;
        Read From Table DB_MAE_MAR;
        Read From Table DB_MAE_NOD;
        Read From Table DB_MAE_TIV;
        Read From Table DB_MAE_VEH;
        Read From Table DB_MAE_PER;
        Read From Table DB_MAE_PRO;
        Read From Table DB_MAE_COM;
        Read From Table DB_NOD_NOD1;
        Read From Table DB_TIV_VEH;
        Read From Table DB_NOD_PRO;
        Read From Table DB_NOD_PER;
        Read From Table DB_NOD_VEH;
        Read From Table DB_COM_VEH;
        Read From Table DB_VEH_PER;
        Read From Table DB_NOD_NOD1_TIV;
        Read From Table DB_NOD_PRO_PER;
        Read From Table DB_PRO_COM;
        !Read From Table DB_ESCALARES;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_MAE_TIN
      body       :  
        Read From Table DB_MAE_TIN;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_MAE_MAR
      body       :  
        Read From Table DB_MAE_MAR;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_MAE_NOD
      body       :  
        Read From Table DB_MAE_NOD;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_MAE_TIV
      body       :  
        Read From Table DB_MAE_TIV;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_MAE_VEH
      body       :  
        Read From Table DB_MAE_VEH;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_MAE_PER
      body       :  
        Read From Table DB_MAE_PER;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_MAE_PRO
      body       :  
        Read From Table DB_MAE_PRO;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_MAE_COM
      body       :  
        Read From Table DB_MAE_COM;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_NOD_NOD1
      body       :  
        Read From Table DB_NOD_NOD1;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_TIV_VEH
      body       :  
        
        Read From Table DB_TIV_VEH;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_NOD_PRO
      body       :  
        Read From Table DB_NOD_PRO;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_NOD_PER
      body       :  
        Read From Table DB_NOD_PER;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_NOD_VEH
      body       :  
        Read From Table DB_NOD_VEH;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_COM_VEH
      body       :  
        Read From Table DB_COM_VEH;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_VEH_PER
      body       :  
        Read From Table DB_VEH_PER;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_DB_NOD_NOD1_TIV
      body       :  
        Read From Table DB_NOD_NOD1_TIV;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_NOD_PRO_PER
      body       :  
        Read From Table DB_NOD_PRO_PER;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_NOD_PRO_COM_PER
      body       :  
        Read From Table DB_PRO_COM;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LEER_ESCALARES
      body       :  
        Read From Table DB_ESCALARES;

    ENDPROCEDURE  ;

  ENDSECTION Lectura_DB ;

  SECTION Elementos_Modelo_Matematico


    DECLARATION SECTION Horizon_Declaration

      HORIZON:
         identifier      :  PHO
         subset of       :  PERH
         index           :  t
         current period  :  PINI
         interval length :  PEPA
         definition      :  
                            !ElementRange(0,MPER,prefix:"t-")
                            ;

      SET:
         identifier      :  PERH
         text            :  "Periodos totales  para definir Horizonte con Bases de Datos"
         index           :  Peri ;

      PARAMETER:
         identifier      :  MPER
         text            :  "Maximo número de periodos"
         definition      :  2 ;

      ELEMENT PARAMETER:
         identifier      :  PINI
         text            :  "Periodo Inicial"
         range           :  PHO
         definition      :  Element(PHO,2) ;

      SET:
         identifier      :  PEI
         subset of       :  PHO
         text            :  "Periodo Inicial"
         definition      :  Element(PHO,2) ;

      PARAMETER:
         identifier      :  PEPA
         text            :  "Periodos de planificación"
         definition      :  2 !CARD(PHO)-1
                            ;

      SET:
         identifier      :  PEP
         subset of       :  PHO
         definition      :  PHO-PEI-element(PHO,1) ;

    ENDSECTION  ;

    DECLARATION SECTION Conjuntos_leidos

      SET:
         identifier   :  NOD
         text         :  "Nodos"
         indices      :  i, j ;

      SET:
         identifier   :  MAR
         text         :  "Marcas de las EDS" ;

      SET:
         identifier   :  TIN
         text         :  "Tipo de Nodod" ;

      STRING PARAMETER:
         identifier   :  TNOD
         index domain :  (i) ;

      SET:
         identifier   :  NPA
         subset of    :  NOD
         text         :  "Nodos Planta de abastecimiento"
         definition   :  {i in NOD| TNOD(i)="PLANT"}
         comment      :  "Este conjunto incluye las plantas dummy, para permitir recirculación" ;

      SET:
         identifier   :  NCL
         subset of    :  NOD
         text         :  "Nodos Clientes "
         definition   :  {i in NOD|TNOD(i)="CLIEN"} ;

      SET:
         identifier   :  NPE
         subset of    :  NOD
         text         :  "Nodos de Pernoctación"
         definition   :  {i in NOD|TNOD(i)="PERNO"} ;

      SET:
         identifier   :  NOP
         subset of    :  NOD
         text         :  "Nodos orígenes potenciales"
         definition   :  {i in NOD|TNOD(i)="ORIGE"} ;

      SET:
         identifier   :  VEH
         text         :  "Vehículos"
         index        :  k ;

      SET:
         identifier   :  TVE
         text         :  "Tipo de Vehículo"
         index        :  v ;

      SET:
         identifier   :  VET
         index domain :  (v)
         subset of    :  VEH
         text         :  "Tipo de Vehículo"
         definition   :  {k in VEH|PVET(v,k)=1} ;

      PARAMETER:
         identifier   :  PVET
         index domain :  (v,k)
         text         :  "Parametro para definir el tipo de vehículo " ;

      SET:
         identifier   :  PRO
         text         :  "Productos"
         index        :  m ;

      SET:
         identifier   :  COM
         text         :  "Compartimientos"
         index        :  l ;

      PARAMETER:
         identifier   :  PCON
         index domain :  (i,j)
         text         :  "Parametro de conectividad si i se conecta con j" ;

      SET:
         identifier   :  NVI
         index domain :  (i)
         subset of    :  NOD
         text         :  "Nodos j que se pueden visitar desde i "
         definition   :  {j in NOD|PCON(i,j)=1} ;

      SET:
         identifier   :  NLL
         index domain :  (j)
         subset of    :  NOD
         text         :  "Nodos que desde los cuales se puede llegar a j"
         definition   :  {i in NOD|PCON(i,j)=1} ;

      PARAMETER:
         identifier   :  PCOV
         index domain :  (l,k)
         text         :  "indica si el compartmiento l es del vehículo k" ;

      SET:
         identifier   :  COV
         index domain :  (k)
         subset of    :  COM
         text         :  "Compartimientos del vehículo k"
         definition   :  {l in COM|PCOV(l,k)=1} ;

      PARAMETER:
         identifier   :  PPRC
         index domain :  (i,m)
         text         :  "Parámetro para definir si el producto es intercambiado con el nodo i"
         comment      :  "Este parametro también e puede automatizar desde un procedimiento ( Para todos los nodos excepto los de Pernoctación y Origenes Potenciales )" ;

      SET:
         identifier   :  PRC
         index domain :  (i)
         subset of    :  PRO
         text         :  "Producto que puede ser intercambiado en nodo i"
         definition   :  {m in PRO|PPRC(i,m)=1} ;

      PARAMETER:
         identifier   :  PNPV
         index domain :  (i,k)
         text         :  "Indica si el vehiculo k puede visitar el nodo i" ;

      SET:
         identifier   :  NPV
         index domain :  (k)
         subset of    :  NOD
         text         :  "Nodos que se pueden visitar con vehículo k"
         definition   :  {i in NOD|PNPV(i,k)=1} ;

      PARAMETER:
         identifier   :  PNOI
         index domain :  (i,k)
         text         :  "Indica si el vehiculo k está en el nodo i al iniciar la corrida" ;

      SET:
         identifier   :  NOI
         index domain :  (k)
         subset of    :  NOD
         text         :  "Nodo Origen asociado al vehículo k"
         definition   :  {i in NOD|PNOI(i,k)=1} ;

      PARAMETER:
         identifier   :  PNPP
         index domain :  (i,j)
         text         :  "Nodo potencial origen j asociado a un nodo de pernoctación i" ;

      SET:
         identifier   :  NPP
         index domain :  (i)
         subset of    :  NOD
         text         :  "Nodo potencial origen asociado a un nodo de pernoctación"
         definition   :  {j|PNPP(i,j)=1} ;

      SET:
         identifier   :  NNO
         index domain :  (j)
         subset of    :  NOD
         text         :  "Nodo de pernoctacion asociado a nodo origen"
         definition   :  {i|PNPP(i,j)=1} ;

    ENDSECTION  ;

    DECLARATION SECTION Conjuntos_Calculados

      SET:
         identifier   :  NIT
         subset of    :  NOD
         text         :  "Nodos intermedios (Plantas de abastecimiento y Clientes)"
         definition   :  NPA+NCL
         comment      :  "Son nodos que en la ruta de cada día se visitan en la mitad de la ruta, nunca en un extremo de la ruta" ;

      SET:
         identifier   :  NVV
         index domain :  (i,k)
         subset of    :  NOD
         text         :  "Nodos que se pueden visitar con k desde i"
         definition   :  NPV(k) * NVI(i) ;

      SET:
         identifier   :  NLV
         index domain :  (i,k)
         subset of    :  NOD
         text         :  "Nodos a los cuales se puede llegar a i con k"
         definition   :  NPV(k)*NLL(i) ;

      PARAMETER:
         identifier   :  PNOC
         index domain :  (i,l)
         text         :  "Indica si el compartimiento l puede visitar el nodo i" ;

      SET:
         identifier   :  NCO
         index domain :  (l)
         subset of    :  NOD
         text         :  "Nodos que pueden ser visitados por un compartimiento"
         definition   :  {i| PNOC(i,l)=1} ;

      SET:
         identifier   :  CNO
         index domain :  (i)
         subset of    :  COM
         text         :  "Compartimientos que pueden visitar al nodo i"
         definition   :  {l | PNOC(i,l)=1} ;

      SET:
         identifier   :  NIL
         index domain :  (l)
         subset of    :  NOD
         text         :  "Nodos en los cuales se puede intercambiar producto y pueden ser visitados por el compartimiento l"
         definition   :  NIT * NCO(l) ;

      SET:
         identifier   :  NCC
         index domain :  (l)
         subset of    :  NOD
         text         :  "Nodos clientes que pueden ser visitados por el compartimiento l"
         definition   :  NCL * NCO(l) ;

      SET:
         identifier   :  NPL
         index domain :  (l)
         subset of    :  NOD
         text         :  "Nodos plantas que pueden ser visitados por el compartimiento l"
         definition   :  NPA*NCO(l) ;

      SET:
         identifier   :  NNL
         index domain :  (l)
         subset of    :  NOD
         text         :  "Nodos de pernoctacion que pueden ser visitados por el compartimiento l"
         definition   :  NCO(l)*NPE ;

      SET:
         identifier   :  NOL
         index domain :  (l)
         subset of    :  NOD
         text         :  "Nodos de origen que pueden ser visitados por el compartimiento l"
         definition   :  NCO(l)*NOP ;

      SET:
         identifier   :  NPK
         index domain :  (k)
         subset of    :  NOD
         text         :  "Nodos planta que pueden ser visitados por el vehículo k"
         definition   :  NPA*NPV(k) ;

      SET:
         identifier   :  NIK
         index domain :  (k)
         subset of    :  NOD
         text         :  "Nodos que pueden ser visitados por k y se puede intercambiar producto"
         definition   :  NIT*NPV(k) ;

      SET:
         identifier   :  NCK
         index domain :  (k)
         subset of    :  NOD
         text         :  "Nodos cliente que pueden ser visitados por k"
         definition   :  NCL*NPV(k) ;

      SET:
         identifier   :  NOK
         index domain :  (k)
         subset of    :  NOD
         text         :  "Nodos orígenes potenciales que pueden ser visitados por k"
         definition   :  NOP*NPV(k) ;

      SET:
         identifier   :  NNK
         index domain :  (k)
         subset of    :  NOD
         text         :  "Nodos potenciales de pernoctacion del vehiculo k"
         definition   :  NPE*NPV(k) ;

    ENDSECTION  ;

    DECLARATION SECTION Parametros_Leidos

      PARAMETER:
         identifier   :  DEMA
         index domain :  (i in NCL,m,t)
         text         :  "Demanda en el nodo cliente i, del producto m en el periodo t" ;

      PARAMETER:
         identifier   :  INVS
         index domain :  (i,m,t)
         text         :  "inventario de seguridad" ;

      PARAMETER:
         identifier   :  CAPS
         index domain :  (i,m)
         text         :  "Capacidad máxima en el nodo i, del producto m" ;

      PARAMETER:
         identifier   :  CALM
         index domain :  (i,m)
         text         :  "Costo de almacenamiento" ;

      PARAMETER:
         identifier   :  TIVI
         index domain :  (i,j)
         text         :  "Tiempo de recorrido en el tramo de ir de i a j" ;

      PARAMETER:
         identifier   :  CTRA
         index domain :  (i,j,v)
         text         :  "Costo del tramo de ir de i a j" ;

      PARAMETER:
         identifier   :  TMIN
         index domain :  (i,t)
         text         :  "Tiempo mínimo de llegada de un vehículo al nodo i en periodo t" ;

      PARAMETER:
         identifier   :  TMAX
         index domain :  (i,t)
         text         :  "Tiempo máximo de llegada de un vehículo al nodo i en periodo t" ;

      PARAMETER:
         identifier   :  TSER
         index domain :  (i,k)
         text         :  "Tiempo de servicio en el nodo i para vehículo k" ;

      PARAMETER:
         identifier   :  CACC
         index domain :  (l)
         text         :  "Capacidad máxima del compartimiento l" ;

      PARAMETER:
         identifier   :  CAPV
         index domain :  (k)
         text         :  "Capacidad en peso del vehículo k" ;

      PARAMETER:
         identifier   :  TFJO
         index domain :  (k,t)
         text         :  "Tiempo final de la jornada" ;

      PARAMETER:
         identifier   :  TIJO
         index domain :  (k,t)
         text         :  "Tiempo de inicio de la jornada del vehiculo en el periodo" ;

      PARAMETER:
         identifier   :  DENS
         index domain :  (m)
         text         :  "Densidad del producto m" ;

      PARAMETER:
         identifier   :  INVI
         index domain :  (i in NCL,m)
         text         :  "Inventario inicial por cliente y por producto" ;

      PARAMETER:
         identifier   :  CCIV
         index domain :  (m,l)
         text         :  "Inventario Inicial que tiene el vehículo en el compartimento " ;

      PARAMETER:
         identifier   :  COUV
         index domain :  (k)
         text         :  "Costo de usar un vehiculo en un periodo" ;

      PARAMETER:
         identifier   :  CDUV
         index domain :  (v)
         text         :  "Costo de usar un vehículo en un día" ;

      PARAMETER:
         identifier   :  MBIN
         text         :  "Numero un poco más grande que uno"
         definition   :  1.1 ;

      PARAMETER:
         identifier   :  DIST
         index domain :  (i,j)
         text         :  "Distancia del nodo i al nodo j"
         comment      :  "Esta se usa para realizar procedimientos en conectividad para reducir dominio" ;

      PARAMETER:
         identifier   :  MAXD
         text         :  "Maxima distancia a permitir " ;

    ENDSECTION  ;

    DECLARATION SECTION Parametros_Calculados

      PARAMETER:
         identifier   :  MSVI
         index domain :  (i,j,k,t)
         text         :  "Número muy grande asociado a la restricción SVIS"
         definition   :  TMAX(i,t)+TIVI(i,j)+TSER(i,k)+MBIN-1
         comment      :  "Este es el valor mas pequeño posible para MSVI, depedende de los parametros de la ecuacion SVIS y de los valores mas grandes que pueden tomar las variables" ;

      PARAMETER:
         identifier   :  MACV
         index domain :  (i,k)
         text         :  "Número muy grande asociado a la restricción subrogada  SRACV1"
         definition   :  [CARD(COV(k))*CARD(PRC(i))]
         comment      :  "Este es el valor mas pequeño posible para MSVI, depedende de los parametros de la ecuacion SVIS y de los valores mas grandes que pueden tomar las variables" ;

      PARAMETER:
         identifier   :  COGV
         index domain :  (v)
         text         :  "Costo Global de usar un tipo vehiculo "
         definition   :  PEPA*CDUV(v) ;

    ENDSECTION  ;

    SECTION Variables_Modelo


      DECLARATION SECTION Variables_Asignacion

        VARIABLE:
           identifier   :  AVI
           index domain :  (i,k,t)|(i in NPV(k))
           text         :  "Asignación de visita al nodo i con k en t"
           range        :  binary ;

        VARIABLE:
           identifier   :  APE
           index domain :  (i,m,l,t)|(i in NIL(l) and m in PRC(i))
           text         :  "Asignación producto m al compartimiento l en el nodo i en t"
           range        :  binary
           definition   :  !|(i in NFC and m in PRC(i))
                           ;

        VARIABLE:
           identifier   :  AVE
           index domain :  (k,t)
           text         :  "Asignación de uso de vehículo k en t"
           range        :  binary ;

        VARIABLE:
           identifier   :  AGV
           index domain :  (k)
           text         :  "Asignación Global de uso de Vehículo: Si se utiliza en  el Horizonte de plaificación."
           range        :  binary ;

        VARIABLE:
           identifier   :  ATR
           index domain :  (i,j,k,t)|(i in NPV(k) and j in NVV(i,k))
           text         :  "Asignación de tramo (si voy de i a j con k en t)"
           range        :  binary
           comment      :  "(i,j,k,t)|(i in NPV(k) and j in NVV(i,k))" ;

      ENDSECTION  ;

      DECLARATION SECTION Variables_Cantidad

        VARIABLE:
           identifier   :  CCC
           index domain :  (i,m,l,t)|(i in NIL(l) and m in PRC(i))
           text         :  "Cantidad de producto m en el compartimiento l que se intercambia con nodo i en t"
           range        :  nonnegative ;

        VARIABLE:
           identifier   :  INV
           index domain :  (i,m,t)| (i in NCL and m in PRC(i))
           text         :  "Inventario del cliente i del producto m en el tiempo t"
           range        :  [INVS(i, m, t), CAPS(i, m)] ;

        VARIABLE:
           identifier   :  CCV
           index domain :  (i,m,l,t)| (i in NCO(l))
           range        :  [0, CACC(l)]
           comment      :  "|(i in NSI(l) and m in PRC(i)) el producto no debe estar reducido,
                            ya que un vehículo puede visitar una estación que no venda corriente y salir con corriente prque no la entrego." ;

      ENDSECTION  ;

      DECLARATION SECTION Variables_Tiempo

        VARIABLE:
           identifier   :  TLL
           index domain :  (i,k,t)
           text         :  "Tiempo de llegada al nodo i con k en t"
           range        :  [TMIN(i, t), TMAX(i, t)] ;

      ENDSECTION  ;

    ENDSECTION Variables_Modelo ;

    SECTION Restricciones


      DECLARATION SECTION Restricciones_Cortes

        CONSTRAINT:
           identifier   :  CCNV
           index domain :  (i,m,l,k,t)|i in NNK(k) or i in NOK(k) and m in PRC(i) and l in COV(k)
           text         :  "Corte cantidad en vehículo si no  se visita el nodo"
           definition   :  CCV(i,m,l,t)<=CACC(l)*AVI(i,k,t)
           comment      :  "Si no se visita el nodo entonces el vehículo debe salir con cero de producto de ese nodo. Ojo pero la Restricción AVOO1 obliga
                            a AVI a ser 1 en el nodo origen, lo cual evita que se restrinja CCV. porque satisface demnandas con CCV fiticias.
                            Pra esto se debe crear otra restricción para hacer cero CCV en nodo origen periodo 1, ojo teniendo cuidado con el inventario inicial del vehículo" ;

      ENDSECTION  ;

      DECLARATION SECTION Restricciones_Asignacion

        CONSTRAINT:
           identifier   :  AUPC
           index domain :  (i,l,t)|(i in NIL(l))
           text         :  "Asignación único producto a compartimiento en nodo de intercambio"
           definition   :  sum(m |m in PRO, APE(i,m,l,t))<=1
           comment      :  "A un compartimiento se le asigna un único producto.
                            !sum((i in NCL, m in PRO), APE(i,m,l,t))<=1" ;

        CONSTRAINT:
           identifier   :  APCL
           index domain :  (j,m,l,t)| (j in NCC(l) and m in PRC(j))
           text         :  "Asignación completa de un producto en un compartimiento a un cliente"
           definition   :  CCV(j,m,l,t)<=CACC(l)*(1-APE(j,m,l,t))
           comment      :  "si salé del nodo cliente j el vehículo queda con cero cantidad
                            CCV(j,m,l,t)=0 si APE(j,m,l,t)=1" ;

      ENDSECTION  ;

      DECLARATION SECTION Restricciones_Capacidad

        CONSTRAINT:
           identifier   :  CPPE
           index domain :  (i,m,t)|(i in NCL and m in PRC(i))
           text         :  "Cantidad permitida de producto entregado"
           definition   :  sum(l|l in CNO(i), CCC(i,m,l,t))<=CAPS(i,m)-INV(i,m,t-1)
                           !Esta restricción es problemática para las EDS de alto consumo. Si CAPS =12000, y la EDS Consume 10000
                           !INVS =2000
                           !Se debe tratar de una manera diferente, pensarlo! Puede pensarse otro modelo de optimización solo para este tipo de EDS
                           ! esto quedaría como Heurística
           comment      :  "No es posible entregar al cliente  una cantidad que al juntarla
                            con el inventario que tiene el cliente supere su capacidad." ;

        CONSTRAINT:
           identifier   :  CAPP
           index domain :  (i,k,t)|(i in NPK(k))
           text         :  "Capacidad en peso del vehículo"
           definition   :  !sum((m in PRO, l in COV(K)), DENS(m)* CCV(i,m,l,t))<=CAPV(k)
                           sum((m,l)|l in COV(k), DENS(m)* CCV(i,m,l,t))<=CAPV(k)
           comment      :  "Un vehículo puede cargar tanta cantidad de combustible como su capacidad en peso lo permita.
                            !sum((i in NCL, m, l in COV(k)), DENS(m)*CCC(i,m,l,t))<=CAPV(k)" ;

      ENDSECTION  ;

      DECLARATION SECTION Restricciones_Relacion

        CONSTRAINT:
           identifier   :  RACV1
           index domain :  (i,m,k,l,t)|(i in NIL(l) and l in COV(k) and m in PRC(i))
           text         :  "Relación - asignación producto compartimiento -> visita cliente"
           definition   :  APE(i,m,l,t)<= AVI(i,k,t)
           comment      :  "Si al menos un compartimiento es asignado a un cliente ->
                            El vehículo del compartimiento debe visitar el cliente." ;

        CONSTRAINT:
           identifier   :  SRACV1
           index domain :  (i,k,t)|(i in NIK(k))
           text         :  "Restricción Subrogada Relación - asignación producto compartimiento -> visita cliente"
           definition   :  Sum((l,m)|(l in COV(k) and m in PRC(i)),APE(i,m,l,t))<=MACV(i,k)*AVI(i,k,t)
                           
                           
                           !APE(i,m,l,t)<= AVI(i,k,t)
                           
                           
                           ! yo considero que se puede hacer una Suma sobre l y sobre m de una vez.   Y se reduciría el dominio de la restricción
           comment      :  "Si al menos un compartimiento es asignado a un cliente ->
                            El vehículo del compartimiento debe visitar el cliente." ;

        CONSTRAINT:
           identifier   :  RACV2
           index domain :  (i,k,t)|(i in NIK(k))
           text         :  "Relación visita nodo de intercambio -> asignación producto compartimiento"
           definition   :  sum((m,l)|l in COV(k), APE(i,m,l,t))>=AVI(i,k,t)
           comment      :  "Si un vehículo atiende un cliente -> Al menos un compartimiento del vehículo es asignado para atender el cliente" ;

        CONSTRAINT:
           identifier   :  RVIN
           index domain :  (i,m,k,t)|(i in NCK(k))
           text         :  "Si visito nodo cliente entonces se puede intercambiar producto"
           definition   :  sum(l in COV(k), CCC(i,m,l,t))<=CAPS(i,m)*AVI(i,k,t)
           comment      :  "!las plantas de abastecimiento no se incluyen en esta restriccion
                            !este corte se podría validar (con las plantas)" ;

        CONSTRAINT:
           identifier   :  RCPA1
           index domain :  (i,m,l,t)|(i in NIL(l))
           text         :  "Relación cantidad de producto - asignación compartimiento"
           definition   :  CCC(i,m,l,t)<=CACC(l)*APE(i,m,l,t)
           comment      :  "Si en un compartimiento hay producto entonces el producto fue asignado al compartimiento" ;

        CONSTRAINT:
           identifier   :  RCPA2
           index domain :  (i,m,l,t)|(i in NIL(l))
           text         :  "Relación asignación compartimiento - cantidad de producto"
           definition   :  CCC(i,m,l,t)>=APE(i,m,l,t)
           comment      :  "Ojo con esta restriccion que depende de las
                            dimensiones de los parametros
                            Si en un compartimiento fue asignado un producto entonces el compartimiento tiene producto" ;

        CONSTRAINT:
           identifier   :  RAGV
           index domain :  (k,t)
           text         :  "Restricción Asignación global de un vehículo en el horizonte  de Planicación:Si lo uso en un periodo, entonces se usa en el horizonte."
           definition   :  AVE(k,t)<=AGV(k)
           comment      :  "Esta restricción se  debe a  analizar respecto a la restricción Subrogada. Analizar si realmente es mejor." ;

        CONSTRAINT:
           identifier   :  SRAGV
           index domain :  (k)
           text         :  "Restricción Subrogada Asignación global de un vehículo en el horizonte  de Planiicación:Si lo uso en un periodo, entonces se usa en el horizonte."
           definition   :  sum(t, AVE(k,t))<=PEPA*AGV(k) ;

      ENDSECTION  ;

      DECLARATION SECTION Restricciones_Flujo_Producto

        CONSTRAINT:
           identifier   :  BALI
           index domain :  (i,m,t)|(i in NCL and m in PRC(i))
           text         :  "Balance de inventarios"
           definition   :  INV(i,m,t)=INV(i,m,t-1)+sum(l in CNO(i), CCC(i,m,l,t))-DEMA(i,m,t)
           comment      :  "El inventario final del periodo  t  debe ser igual a lo que sobró al final del periodo anterior,
                            más la cantidad de producto que  se entrega en periodo a ese nodo, menos la demanda en ese periodo." ;

        CONSTRAINT:
           identifier   :  BAVI
           index domain :  (j,m,l,t) |j in NPL(l)
           text         :  "Cargue en la planta de abastecimiento "
           definition   :  CCV(j,m,l,t)=CCC(j,m,l,t) ;

        CONSTRAINT:
           identifier   :  BAVC1
           index domain :  (j,k,i,m,l,t)|(j in NCK(k) and i in NLV(j,k) and l in COV(k))
           text         :  "Balance de inventarios para los vehículos después de salir de un cliente (1)"
           definition   :  CCV(j,m,l,t)<=CCV(i,m,l,t)-CCC(j,m,l,t)-CACC(l)*(ATR(i,j,k,t)- 1) ;

        CONSTRAINT:
           identifier   :  BAVC2
           index domain :  (j,k,i,m,l,t)|(j in NCK(k) and i in NLV(j,k) and l in COV(k))
           text         :  "Balance de inventarios para los vehículos después de salir de un cliente (2)"
           definition   :  CCV(j,m,l,t)>=CCV(i,m,l,t)-CCC(j,m,l,t)+CACC(l)*(ATR(i,j,k,t)- 1) ;

        CONSTRAINT:
           identifier   :  BAVO
           index domain :  (i,j,m,l,t)| i in NNL(l) and j in NPP(i)
           text         :  "Con lo que llegué a dormir con eso salí"
           definition   :  CCV(j,m,l,t)=CCV(i,m,l,t-1)
           comment      :  "j se refiere a un nodo origen
                            i se refiere a un nodo de pernoctacion" ;

        CONSTRAINT:
           identifier   :  BAVP1
           index domain :  (j,i,l,m,k,t)|(j in NNK(k) and i in NLV(j,k) and l in COV(k))
           text         :  "Balance de inventario en vehículo después de  nodo de pernoctación."
           definition   :  CCV(j,m,l,t)<=CCV(i,m,l,t)-CACC(l)*(ATR(i,j,k,t)-1)
                           !ojo index domain estaba mal en power point, verificar, faltaba la m, la l
           comment      :  "Con lo que salgo del Nodo de Pernoctación es la misma cantidad que con lo que llego,
                            Si fui desde i a j." ;

        CONSTRAINT:
           identifier   :  BAVP2
           index domain :  (j,i,l,m,k,t)|(j in NNK(k) and i in NLV(j,k) and l in COV(k))
           text         :  "Balance de inventario en vehículo después de  nodo de pernoctación."
           definition   :  CCV(j,m,l,t)>=CCV(i,m,l,t)+CACC(l)*(ATR(i,j,k,t)-1)
                           !ojo index domain estaba mal en power point, verificar, faltaba la m, la l
           comment      :  "OJO falta especificar bien el dominio y los conjuntos donde tiene el DOminio, NLL, NPE?? Crearlos" ;

        CONSTRAINT:
           identifier   :  BAVD1
           index domain :  (i,j,l,m,k,t)|(j in NOK(k) and i in NNO(j) and l in COV(k))
           text         :  "Balance de inventario en vehículo cuando descansa en un periodo"
           definition   :  CCV(i,m,l,t)>=CCV(j,m,l,t)-CACC(l)*AVE(k,t) ;

        CONSTRAINT:
           identifier   :  BAVD2
           index domain :  (i,j,l,m,k,t)|(j in NOK(k) and i in NNO(j) and l in COV(k))
           text         :  "Balance de inventario en vehículo cuando descansa en un periodo"
           definition   :  CCV(i,m,l,t)<=CCV(j,m,l,t)+CACC(l)*AVE(k,t) ;

      ENDSECTION  ;

      DECLARATION SECTION Restricciones_Flujo_Vehiculo

        CONSTRAINT:
           identifier   :  SNOR1
           index domain :  (i,k,t)|(i in NOI(k) and t in PEI)
           text         :  "Salida del origen en periodo inicial"
           definition   :  sum(j in NVV(i,k), ATR(i,j,k,t))= AVE(k,t) ;

        CONSTRAINT:
           identifier   :  AVOO1
           index domain :  (i,k,t)|(i in NOI(k) and t in PEI)
           text         :  "Asignacion de visita obligatoria a nodo origen"
           definition   :  AVI(i,k,t)=1 ;

        CONSTRAINT:
           identifier   :  SNOR2
           index domain :  (i,k,t)|i in NOK(k) and t in PEP
           text         :  "Salidad en el nodo origen en periodos despues del inicial"
           definition   :  sum(j in NVV(i,k), ATR(i,j,k,t))<=AVE(k,t)
           comment      :  "Si no utilizo el vehículo no debo salir del nodo origen del periodo" ;

        CONSTRAINT:
           identifier   :  SNOR3
           index domain :  (i,k,t)|i in NOK(k) and t in PEP
           text         :  "Salidad en el nodo origen en periodos despues del inicial"
           definition   :  sum(j in NVV(i,k), ATR(i,j,k,t))>=AVI(i,k,t)-MBIN*(1-AVE(k,t))
           comment      :  "Si utilizo el vehículo debo salir del nodo inicial del vehículo en dicho periodo" ;

        CONSTRAINT:
           identifier   :  SNOR4
           index domain :  (i,k,t)|i in NOK(k) and t in PEP
           text         :  "Salidad en el nodo origen en periodos despues del inicial"
           definition   :  sum(j in NVV(i,k), ATR(i,j,k,t))<=AVI(i,k,t)+MBIN*(1-AVE(k,t))
           comment      :  "i utilizo el vehículo debo salir del nodo inicial del vehículo en dicho periodo" ;

        CONSTRAINT:
           identifier   :  AVOO2
           index domain :  (k,t)
           text         :  "Asignacion visita unica y obligatoria a nodo inicial"
           definition   :  sum(i in NOK(k), AVI(i,k,t))=1
           comment      :  "Solo se puede salir de un nodo origen potencial una vez" ;

        CONSTRAINT:
           identifier   :  RVSA
           index domain :  (i,k,t)|(i in NIK(k))
           text         :  "Relacion visita nodo inicial - salida de nodo por algun tramo"
           definition   :  AVI(i,k,t)=sum(j in NVV(i,k), ATR(i,j,k,t))
                           !esta restriccion se debe eliminar, si visito a un nodo inicial no necesariamente debo salir de el.
                           !Puede que tenga que quedarme descansando todo el día allí
           comment      :  "Si visita el cliente entonces se debe salir del cliente por algun tramo" ;

        CONSTRAINT:
           identifier   :  ENSA
           index domain :  (i,k,t) | (i in NIK(k))
           text         :  "Entrada Salida del Nodo"
           definition   :  sum(j in NVV(i,k), ATR(i,j,k,t)) + sum(j in NLV(i,k), ATR(j,i,k,t)) = 2 *AVI(i,k,t)
           comment      :  "Establece que para cada nodo que se visite, se debe entrar y salir de este
                            Con RVSA y RVLL esta restriccion ya se incluye, pero al parecer es un corte. Se corrió con esta y sin esta y se demor 1 seg menos cuando se agregó." ;

        CONSTRAINT:
           identifier   :  RVLL
           index domain :  (j,k,t)|(j in NIK(k))
           text         :  "Relacion visita nodo - llegada de nodo por algun tramo"
           definition   :  AVI(j,k,t)=sum(i in NLV(j,k), ATR(i,j,k,t)) ;

        CONSTRAINT:
           identifier   :  LNPE1
           index domain :  (j,k,t)|(j in NNK(k))
           text         :  "Llegada al nodo de pernoctacion"
           definition   :  sum(i in NLV(j,k), ATR(i,j,k,t))<=AVE(k,t)
           comment      :  "Si no utilizo el vehiculo en el periodo no llego al nodo de pernoctacion" ;

        CONSTRAINT:
           identifier   :  LNPE2
           index domain :  (j,k,t)|(j in NNK(k))
           text         :  "Llegada al nodo de pernoctacion"
           definition   :  1=1!sum(i in NLV(j,k), ATR(i,j,k,t))>=-AVE(k,t)
                           !Sobra esta restricción
           comment      :  "Si no utilizo el vehiculo en el periodo no llego al nodo de pernoctacion" ;

        CONSTRAINT:
           identifier   :  LNPE3
           index domain :  (j,k,t)|(j in NNK(k))
           text         :  "Llegada al nodo de pernoctacion"
           definition   :  sum(i in NLV(j,k), ATR(i,j,k,t))<=AVI(j,k,t)+MBIN*(1-AVE(k,t))
           comment      :  "Todo vehículo que se utilice debe llegar a algun nodo de pernoctacion en un periodo" ;

        CONSTRAINT:
           identifier   :  LNPE4
           index domain :  (j,k,t)|(j in NNK(k))
           text         :  "Llegada al nodo de pernoctacion"
           definition   :  sum(i in NLV(j,k), ATR(i,j,k,t))>=AVI(j,k,t)-MBIN*(1-AVE(k,t))
           comment      :  "Todo vehículo que se utilice debe llegar a algun nodo de pernoctacion en un periodo" ;

        CONSTRAINT:
           identifier   :  AVOP
           index domain :  (k,t)
           text         :  "Asignacion de visita obligatoria y unica a nodo de pernoctacion"
           definition   :  sum(j in NNK(k), AVI(j,k,t))=1
           comment      :  "Solo se puede visitar un nodo de pernoctacion y es obligatorio en cada periodo" ;

        CONSTRAINT:
           identifier   :  DECP
           index domain :  (i,j,k,t)|i in NNK(k) and  j in NPP(i)
           text         :  "Conservacion de posicion en descanso de cambio de periodo"
           definition   :  AVI(i,k,t-1)=AVI(j,k,t)
           comment      :  "Si paso la noche en un nodo de pernoctacion al siguiente periodo empiezo en el nodo origen asociado a dicho nodo de pernoctacion" ;

        CONSTRAINT:
           identifier   :  DEMP1
           index domain :  (i,j,k,t)|i in NNK(k) and  j in NPP(i)
           text         :  "Conservacion de posicion en descanso del mismo periodo"
           definition   :  AVI(j,k,t)<=AVI(i,k,t)+MBIN*(AVE(k,t))
           comment      :  "Funciona con DESC2 para generar la igualdad dado  lo siguiente: Si AVE(k,t)=0 ->
                            AVI(j,k,t)=AVI(i,k,t)
                            Si el Vehículo descansa, no se mueve" ;

        CONSTRAINT:
           identifier   :  DEMP2
           index domain :  (i,j,k,t)|i in NNK(k) and  j in NPP(i)
           text         :  "Conservacion de posicion en descanso del mismo periodo"
           definition   :  AVI(j,k,t)>=AVI(i,k,t)-MBIN*(AVE(k,t))
           comment      :  "Funciona con DESC2 para generar la igualdad dado  lo siguiente: Si AVE(k,t)=0 ->
                            AVI(j,k,t)=AVI(i,k,t)
                            Si no utilizo el vehiculo en un periodo, el vehículo se queda en el nodo de pernoctación asociado al respectivo
                            nodo origen" ;

      ENDSECTION  ;

      DECLARATION SECTION Restricciones_Tiempo

        CONSTRAINT:
           identifier   :  SVIS
           index domain :  (i,k,j,t)|(i in NPV(k) and j in NVV(i,k))
           text         :  "Secuencia de visitas"
           definition   :  TLL(i,k,t) + TIVI(i,j) + TSER(i,k) + MSVI(i,j,k,t)*(ATR(i,j,k,t)-1) <= TLL(j,k,t)
           comment      :  "Hora de llegada a i con k más el tiempo de viaje de i a j debe ser menor igual que el tiempo de llegada a j,
                            si voy de i a j. Si no voy de i a j el lado izquierdo será negativo y por lo tanto menor que una variable positiva." ;

        CONSTRAINT:
           identifier   :  DTFJ
           index domain :  (i,k, t)| (i in NNK(k))
           text         :  "Definición del tiempo final de la jornada"
           definition   :  TLL(i,k,t)<= TFJO(k,t)
           comment      :  "El tiempo de llegada a cualquier nodo i con el vehículo k debe ser menor al tiempo en que termina la jornada en ese periodo." ;

        CONSTRAINT:
           identifier   :  DTIJ
           index domain :  (i,k,t)| (i in NOK(k))
           text         :  "Definicion tiempo inicio de la jornada"
           definition   :  TLL(i,k,t)>=TIJO(k,t) ;

      ENDSECTION  ;

    ENDSECTION Restricciones ;

    DECLARATION SECTION Funcion_Objetivo

      VARIABLE:
         identifier :  MCO
         range      :  free
         definition :  Sum ((i, m in PRC(i), t),CALM(i,m)*INV(i,m,t))+ sum((k,t),COUV(k)*AVE(k,t))+Sum((v, k in VET(v), i in NPV(k),j in NVV(i,k),t),CTRA(i,j,v)*ATR(i,j,k,t))
                       +sum((v,k in VET(v)),COGV(v)*AGV(k))
                       
                       !! Antes
                       !Sum ((i, m in PRC(i), t),CALM(i,m)*INV(i,m,t))+Sum((k,i in NPV(k),j in NVV(i,k),t),CTRA(i,j,k)*ATR(i,j,k,t))+sum((k,t),COUV(k)*AVE(k,t))
         comment    :  "Sum ((i, m in PRC(i), t),CALM(i,m)*INV(i,m,t))+Sum((i,j,k,t),CTRA(i,j)*ATR(i,j,k,t))+sum((k,t),COUV(k)*AVE(k,t))" ;

    ENDSECTION  ;

    DECLARATION SECTION Problemas_Matematicos

      SET:
         identifier  :  SRES
         subset of   :  AllConstraints ;

      SET:
         identifier  :  SVAR
         subset of   :  AllVariables ;

      MATHEMATICAL PROGRAM:
         identifier  :  MinimizarCostos
         objective   :  MCO
         direction   :  minimize
         constraints :  SRES
         variables   :  SVAR
         type        :  Automatic ;

    ENDSECTION  ;

  ENDSECTION Elementos_Modelo_Matematico ;

  SECTION Modelo_Tiempos_de_Llegada


    DECLARATION SECTION Funcion_Objetivo2

      VARIABLE:
         identifier :  FOT
         range      :  free
         definition :  sum((i in NOD,k in VEH,t), TLL(i,k,t)) ;

    ENDSECTION  ;

    DECLARATION SECTION PGUA

      PARAMETER:
         identifier   :  PATR
         index domain :  (i,j,k,t) ;

    ENDSECTION  ;

    DECLARATION SECTION Modelo_Matematico_MT

      SET:
         identifier  :  CREST
         subset of   :  AllConstraints ;

      SET:
         identifier  :  CVAR
         subset of   :  AllVariables ;

      MATHEMATICAL PROGRAM:
         identifier  :  FTLL
         objective   :  FOT
         direction   :  minimize
         constraints :  CREST
         variables   :  CVAR
         type        :  LP ;

    ENDSECTION  ;

    PROCEDURE
      identifier :  Tllegadas
      body       :  
        empty PATR;
        PATR(i,j,k,t):=ATR(i,j,k,t);
        ATR(i,j,k,t):=PATR(i,j,k,t);
        solve FTLL;
        TimeProcess;

    ENDPROCEDURE  ;

  ENDSECTION Modelo_Tiempos_de_Llegada ;

  SECTION Procedimientos_Solucion_Modelo


    SECTION Procesamiento_de_Datos


      PROCEDURE
        identifier :  CalculoConjuntos
        body       :  
          EMPTY  PNOC;
          for (i, k, l)| l in COV(k)  do
                  if PNPV(i,k) = 1 and PCOV(l,k)=1 then
                          PNOC(i,l):=1;
                  Else
                          PNOC(i,l):=0;
                  endif;
          endfor;

      ENDPROCEDURE  ;

      PROCEDURE
        identifier :  CalculoConectividadRed
        comment    :  "Reglas de conectividad (a donde puedo salir de i):
                       De un NOP se puede ir a un NPA o NCL, no se puede ir a un NPE.
                       De un NPA no se puede ir a otro NPA, solo se puede ir a un NPE o NCL
                       De un NCL se puede ir a otro NCL, NPA o NPE
                       De un NPE no se puede salir"
        body       :  
          PCON(i,j):=0;
          for (i,j) do
                  !Definicion PNVI
                  !De un NOP se puede ir a un NPA o NCL, no se puede ir a un NPE.
                  if i in NOP and (j in (NPA or NCL)) then
                          PCON(i,j):=1
                  endif;
                  !De un NPA no se puede ir a otro NPA, solo se puede ir a un NPE o NCL
                  if i in NPA and (j in (NCL or NPE)) then
                          PCON(i,j):=1
                  endif;
                  !De un NCL se puede ir a otro NCL, NPA o NPE
                  if i in NCL and (j in (NCL or NPA or NPE)) and i<>j then
                          PCON(i,j):=1
                  endif;
          
          endfor;
          
          !CÁLCULO DE PROCEDIMIENTOS PARA REDUCCIÓN DE DOMINIO
                  ! 1. No permitir visitas entre EDS “lejanas”, en tiempo o en distancia
          for (i,j) | (i IN NCL and j IN NCL) do
          
                  if DIST(i,j)> MAXD then
                          PCON(i,j):=0
                  endif;
          endfor;

      ENDPROCEDURE  ;

    ENDSECTION Procesamiento_de_Datos ;

    SECTION Solucion_Modelo


      PROCEDURE
        identifier :  InicializacionVariables
        body       :  
          empty allvariables; !Se debe dejar porque sino se borra, se calcula de nuevo sobre los datos que ya están, y esto genera problemas
          !incializa los inventarios de cada cliente
          for (i in NCL, m in PRO) do
                  INV(i,m,PINI-1):=INVI(i,m);
          endfor;
          !Inicializa los inventarios en vehículo
          for (k, j in NOI(k), i in NNO(j), m, l in COV(k)) do
                  CCV(i,m,l,PINI-1):=CCIV(m,l);
          endfor;
          !Inicializa variable de asignacion de visita al nodo origen
          for (k, j in NOI(k), i in NNO(j)) do
                  AVI(i,k,PINI-1):=1;
          endfor;

      ENDPROCEDURE  ;

      PROCEDURE
        identifier :  INVScero
        body       :  
          
          for (i in NCL, m in PRO, t) do
                  INVS(i,m,t):=0;
          endfor;

      ENDPROCEDURE  ;

      PROCEDURE
        identifier :  SolucionModeloRuteo
        body       :  
          CalculoConjuntos;
          CalculoConectividadRed;
          InicializacionVariables;
          solve MinimizarCostos;

      ENDPROCEDURE  ;

    ENDSECTION Solucion_Modelo ;

    SECTION Validacion_de_Datos


      DECLARATION SECTION Parametros_de_Validacion

        STRING PARAMETER:
           identifier   :  MsjeValidacion ;

        PARAMETER:
           identifier   :  SCON1
           index domain :  (i)
           text         :  "Suma de conectividad hacia un  nodo i desde todos los posibles j"
           definition   :  SUM (j IN NCL, PCON(j,i))
           comment      :  "Utilizado para validar conectividad" ;

        PARAMETER:
           identifier   :  SCON2
           index domain :  (i)
           text         :  "Suma de conectividad saliendo de un  nodo i desde todos los posibles j. "
           definition   :  SUM (j IN NCL, PCON(i,j))
           comment      :  "Utilizado para validar conectividad" ;

        PARAMETER:
           identifier   :  SUCO
           text         :  "Suma de los valores 1 de la conectividad del parametro PCON"
           definition   :  sum ((i,j),PCON(i,j)) ;

      ENDSECTION  ;

      PROCEDURE
        identifier :  Validacion_INVI_CAPS
        body       :  
          empty MsjeValidacion;
          for (i in NCL, m in PRC(i))  do
                  if INVI(i,m) > CAPS(i,m) then
          
          MsjeValidacion := MsjeValidacion + "\n" + "El Inventario Inicial de  "  + m +" en el nodo "  + i +" es mayor que su capacidad de almacenamiento " ;
          
          
          
          
                  endif;
          endfor;
          
          dialogerror  ( MsjeValidacion );

      ENDPROCEDURE  ;

      PROCEDURE
        identifier :  Validacion_PNOI_PNPV
        body       :  
          empty MsjeValidacion;
          for (i  in NOP , k  )  do
            if PNOI(i,k)=1 then
                  if PNPV(i,k) <> PNOI(i,k) then
          
                    MsjeValidacion := MsjeValidacion + "\n" + "El nodo origen en el periodo inicial "  + i +" no se puede visitar con  "  + k +"  Mientras se asegura que el vehículo parte de ese nodo  " ;
          
          
          
                  endif;
             endif;
          endfor;
          
          dialogerror (MsjeValidacion)

      ENDPROCEDURE  ;

      PROCEDURE
        identifier :  Validacion_TIJO_TFIJO
        body       :  
          empty MsjeValidacion;
          for ( k , t  )  do
            if TIJO(k,t) >=TFJO(k,t) then
          
          
                    MsjeValidacion := MsjeValidacion + "\n" + "El tiempo de inicio de la jornada del vehículo  "  + k +" en el periodo "  + t +"  es mayor que el tiempo de finalización de la jornada  " ;
          
          
          
          
             endif;
          endfor;
          
          dialogerror (MsjeValidacion)

      ENDPROCEDURE  ;

      PROCEDURE
        identifier :  Validacion_Conectividad
        body       :  
          empty MsjeValidacion;
          !for i IN  NCL do
          !               if  SCON1(i)=0 OR SCON2(i)=0 then
          !
          !                       MsjeValidacion := MsjeValidacion + "\n" + "la conectividad del nodo  "  + i +"No esta dada, debido a que no es posible saliro entrar de él " ;
          !               endif;
          !endfor;
          !dialogerror (MsjeValidacion)
          !
          !for j IN NPA
          !
          !endfor

      ENDPROCEDURE  ;

    ENDSECTION Validacion_de_Datos ;

  ENDSECTION Procedimientos_Solucion_Modelo ;

  SECTION GUI


    SECTION Mapa


      DECLARATION SECTION Nodos

        PARAMETER:
           identifier   :  CoorX
           index domain :  i ;

        PARAMETER:
           identifier   :  CoorY
           index domain :  i ;

        PARAMETER:
           identifier   :  MaxCoorX
           text         :  "Margen derecha"
           definition   :  max(i, CoorX(i)) ;

        PARAMETER:
           identifier   :  MinCoorX
           definition   :  min(i, CoorX(i)) ;

        PARAMETER:
           identifier   :  PorMar
           text         :  "Porcentaje del rango que hace la margen"
           definition   :  0.1 ;

        PARAMETER:
           identifier   :  MarDer
           text         :  "Margen derecha"
           definition   :  MaxCoorX+PorMar*(MaxCoorX-MinCoorX) ;

        PARAMETER:
           identifier   :  MarIzq
           text         :  "Margen izquierda"
           definition   :  MinCoorX-PorMar*(MaxCoorX-MinCoorX) ;

        PARAMETER:
           identifier   :  MaxCoorY
           definition   :  max(i, CoorY(i)) ;

        PARAMETER:
           identifier   :  MinCoorY
           definition   :  min(i, CoorY(i)) ;

        PARAMETER:
           identifier   :  MarSup
           text         :  "Margen superior"
           definition   :  MaxCoorY+PorMar*(MaxCoorY-MinCoorY) ;

        PARAMETER:
           identifier   :  MarInf
           text         :  "Margen inferior"
           definition   :  MinCoorY-PorMar*(MaxCoorY-MinCoorY) ;

      ENDSECTION  ;

      DECLARATION SECTION Arcos

        PARAMETER:
           identifier   :  Arc01
           index domain :  (i,j,k,t) ;

        ELEMENT PARAMETER:
           identifier   :  ArcColor
           index domain :  k
           range        :  AllColors ;

      ENDSECTION  ;

      DECLARATION SECTION FiltrosMapas

        SET:
           identifier :  lb01
           subset of  :  VEH
           text       :  "Listbox indice libre asociado al vehiculo" ;

        ELEMENT PARAMETER:
           identifier :  lb02
           text       :  "indice libre asociado al periodo"
           range      :  PHO ;

      ENDSECTION  ;

      PROCEDURE
        identifier :  MODEL_GUI
        body       :  
          !Asignación de variable a arco
          Arc01(i,j,k,t):=ATR(i,j,k,t);

      ENDPROCEDURE  ;

    ENDSECTION Mapa ;

    SECTION Graficas


      DECLARATION SECTION ParametrosAuxGraficas

        PARAMETER:
           identifier   :  PCCC
           index domain :  (i,m,t)
           definition   :  sum(l in COM, CCC(i,m,l,t)) ;

        PARAMETER:
           identifier   :  PCCV
           index domain :  (i,m,k,t)
           definition   :  sum(l in COV(k), CCV(i,m,l,t)) ;

      ENDSECTION  ;

      DECLARATION SECTION FiltrosGraficas

        SET:
           identifier :  lb03
           subset of  :  PRO
           text       :  "List box indice libre asociado al producto" ;

        ELEMENT PARAMETER:
           identifier :  lb04
           text       :  "list box indice libre asociado al cliente"
           range      :  NOD ;

        ELEMENT PARAMETER:
           identifier :  lb05
           text       :  "indice libre asociado al vehiculo"
           range      :  VEH ;

        SET:
           identifier :  lb06
           subset of  :  COM
           text       :  "indice libre asociado a los compartimientos" ;

        ELEMENT PARAMETER:
           identifier :  lb07
           text       :  "indice libre asociado al producto"
           range      :  PRO ;

      ENDSECTION  ;

    ENDSECTION Graficas ;

    SECTION Gant


      DECLARATION SECTION Interfaz

        STRING PARAMETER:
           identifier   :  DesVeh
           index domain :  k
           definition   :  FormatString("Vehículo%i", ord(k)) ;

        STRING PARAMETER:
           identifier   :  DesNod
           index domain :  i
           definition   :  FormatString("Nodo%i", ord(i)) ;

        PARAMETER:
           identifier   :  TIIN
           index domain :  (i,k,t) ;

        PARAMETER:
           identifier   :  TIPR
           index domain :  (i,k,t) ;

        ELEMENT PARAMETER:
           identifier   :  Perio
           range        :  PHO ;

        PARAMETER:
           identifier   :  MAXTIME
           index domain :  t
           range        :  free
           definition   :  max((i,k),TLL(i,k,t)) ;

      ENDSECTION  ;

      PROCEDURE
        identifier :  TimeProcess
        body       :  
          TIIN(i,k,t)  := TLL(i,k,t);
          !TIIN(i,k,t)  := TLL(first(j | ATR(i,j,k,t)),k,t);
          TIPR(i,k,t) := sum (j | ATR(i,j,k,t), TSER(i,k)+TIVI(i,j));
          PageRefreshAll();

      ENDPROCEDURE  ;

    ENDSECTION Gant ;

  ENDSECTION GUI ;

  SECTION Leer_de_Excel


    PROCEDURE
      identifier :  Leer_BD_Excel
      body       :  
        Spreadsheet::SetActiveSheet( NombreLibro, "MAE_NOD" ); !establece un libro y una hoja activa donde están los datos
        Spreadsheet::RetrieveSet( NombreLibro, NOD, "MAE_NOD" );
        !Retrieveset permite leer los elementos de un conjunto
        Spreadsheet::RetrieveParameter( NombreLibro, CoorX, "COOR_LON" );
        Spreadsheet::RetrieveParameter( NombreLibro, CoorY, "COOR_LAT" );

    ENDPROCEDURE  ;

    DECLARATION SECTION Parametros_Lectura

      STRING PARAMETER:
         identifier :  NombreLibro
         definition :  "TablasDatosMCDP.xlsm" ;

    ENDSECTION  ;

  ENDSECTION Leer_de_Excel ;

  SECTION Libro_de_Prueba

  ENDSECTION Libro_de_Prueba ;

  SECTION Libro_Cambios_Juan


    PROCEDURE
      identifier :  Procedimiento_de_Cambios

    ENDPROCEDURE  ;

  ENDSECTION Libro_Cambios_Juan ;

  PROCEDURE
    identifier :  MainInitialization

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  MainExecution
    body       :  
      SolucionModeloRuteo;
      !Tllegadas;
      MODEL_GUI;
      !TimeProcess;

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  MainTermination
    body       :  
      return DataManagementExit();

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  BorrarSolucion
    body       :  
      Empty allvariables;

  ENDPROCEDURE  ;

ENDMODEL MCDP ;
